{"version":3,"sources":["utils/common.ts","svgs/scissor.svg","svgs/rock.svg","svgs/paper.svg","App.tsx","components/SignItem/SignItem.tsx","reportWebVitals.ts","index.tsx"],"names":["SignType","Status","Win","Map","Rock","Scissor","Paper","timeout","getSignImage","sign","scissorSvg","rockSvg","paperSvg","SignItem","props","tick","hovered","interval","state","currentSign","status","going","isPlayer","timer","this","setInterval","setState","type","Object","values","action","win","loss","clearInterval","className","getWinOrLossClass","src","onMouseOver","onMouseLeave","alt","onClick","toggle","React","Component","initialStatus","initialSign","initialBotSign","App","useState","setStatus","setSign","botSign","setBotSign","useEffect","draw","selectedSign","_botSign","Error","get","guess","window","setTimeout","clearTimeout","bs","_","sample","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aee1598a.chunk.js","sourcesContent":["import _ from \"lodash\";\n\nimport scissorSvg from \"../svgs/scissor.svg\";\nimport rockSvg from '../svgs/rock.svg'\nimport paperSvg from \"../svgs/paper.svg\";\n\n\n\nexport enum SignType {\n  Rock = \"Rock\",\n  Scissor = \"Scissor\",\n  Paper = \"Paper\"\n};\n\nexport const Win: Map<SignType, SignType> = new Map([\n  [SignType.Rock, SignType.Scissor],\n  [SignType.Paper, SignType.Rock],\n  [SignType.Scissor, SignType.Paper]\n]);\n\nexport enum Status {\n  going = 'Waiting for process',\n  win = 'Win',\n  loss = 'Loss',\n  draw = 'Draw'\n};\n\nexport const getRandomSignType = () => {\n  return _.sample(Object.values(SignType))\n};\n\nexport const getNextSign = (interval: number) => {\n  return Object.values(SignType)[interval % 3]\n}\n\nexport const getSignImage = (sign: SignType | null) => {\n  if (sign === null) return \"\";\n\n  switch (sign) {\n    case SignType.Scissor:\n      return scissorSvg;\n    case SignType.Rock:\n      return rockSvg;\n    case SignType.Paper:\n      return paperSvg;\n  }\n};","export default __webpack_public_path__ + \"static/media/scissor.634156ac.svg\";","export default __webpack_public_path__ + \"static/media/rock.bb112ecc.svg\";","export default __webpack_public_path__ + \"static/media/paper.17707fe4.svg\";","import React, { useState, useEffect } from \"react\";\nimport { SignItem } from \"./components/SignItem/SignItem\";\nimport { Win, Status, getRandomSignType } from \"./utils/common\";\nimport \"./App.css\";\nimport \"./utils/grid.css\";\n\nconst initialStatus = Status.going;\n\nconst initialSign: Sign = {\n  type: null,\n  isPlayer: true,\n};\n\nconst initialBotSign: Sign = {\n  type: null,\n  isPlayer: false,\n};\n\nlet timeout: number;\n\nfunction App() {\n  const [status, setStatus] = useState(initialStatus);\n  const [sign, setSign] = useState(initialSign);\n  const [botSign, setBotSign] = useState(initialBotSign);\n\n  const guess = (selectedSign: Sign, _botSign: Sign): boolean => {\n    if (selectedSign.type === null) {\n      throw new Error(\"Selected sign is null\");\n    }\n\n    return Win.get(selectedSign.type) === _botSign.type;\n  };\n\n  useEffect(() => {\n    if (sign.type === botSign.type) {\n      setStatus(Status.draw);\n    } else if (guess(sign, botSign)) {\n      setStatus(Status.win);\n    } else {\n      setStatus(Status.loss);\n    }\n\n    timeout = window.setTimeout(() => {\n      setStatus(Status.going);\n    }, 3000);\n  }, [sign, botSign]);\n\n  const toggle = (selectedSign: Sign): void => {\n    if (timeout) clearTimeout(timeout);\n\n    const bs = { type: getRandomSignType() || null, isPlayer: false };\n    setBotSign(bs);\n    setSign(selectedSign);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container main\">\n        <SignItem sign={sign} action={toggle} status={status} />\n        <SignItem sign={botSign} status={status} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { getNextSign, getSignImage, Status } from \"../..//utils/common\";\nimport React from \"react\";\n\nimport \"../../App.css\";\nimport \"../../utils/grid.css\";\nimport \"./SignItem.css\";\n\nexport class SignItem extends React.Component<{ sign: Sign, action?: (selectedSign: Sign) => void, status: Status }> {\n  tick: number;\n  hovered: boolean = false;\n  interval: any;\n  state = { currentSign: this.props.sign, status: Status.going };\n\n  \n  constructor(props: any) {\n    super(props);\n    this.tick = this.props.sign.isPlayer ? 1000 : 100;\n  }\n\n  componentDidMount() {\n    let timer = 0;\n    // Every second set currentSign to a random type, animation\n    this.interval = setInterval(() => {\n      timer += 1;\n      if(this.hovered)\n        return\n      this.setState((state) => ({\n        currentSign: {\n          type: getNextSign(timer),\n          isPlayer: this.props.sign.isPlayer,\n        },\n      }));\n    }, this.tick);\n  }\n\n  toggle() {\n    if(this.props.action){\n      this.props.action(this.state.currentSign)\n      this.hovered = false;\n    }\n  }\n\n  getWinOrLossClass() {\n    if(this.props.status === Status.win) {\n      return 'bot-lose';\n    }else if(this.props.status === Status.loss) {\n      return 'player-lose';\n    }else{\n      return ''\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div className={`${this.props.sign.isPlayer ? 'player' : 'bot'} col item-center ${this.getWinOrLossClass()}`}>\n        <img\n          className={`${\n            this.state.currentSign.isPlayer ? \"player-button\" : \"flip-horizontally\"\n          } sign`}\n          src={\n            this.props.status === Status.going\n              ? getSignImage(this.state.currentSign.type)\n              : getSignImage(this.props.sign.type)\n          }\n          onMouseOver={() => this.props.sign.isPlayer ? this.hovered = true : ''}\n          onMouseLeave={() => this.hovered = false}\n          alt=\"sign\"\n          onClick={() => this.toggle()}\n        />\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}